
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { LogOut, Users, Bell, Download } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { DatabaseService } from '@/services/DatabaseService';
import NotificationPanel from './NotificationPanel';
import { supabase } from '@/integrations/supabase/client';

interface HeaderProps {
  userRole: 'admin' | 'member';
  userName: string;
  onLogout: () => void;
  onRoleSwitch?: () => void;
  notifications?: number;
  onNotificationClick?: () => void;
}

const Header = ({
  userRole,
  userName,
  onLogout,
  onRoleSwitch,
  notifications = 0,
  onNotificationClick
}: HeaderProps) => {
  const [isNotificationPanelOpen, setIsNotificationPanelOpen] = useState(false);
  const queryClient = useQueryClient();
  
  // Fetch notifications and tasks using React Query
  const { data: realtimeNotifications = [] } = useQuery({
    queryKey: ['notifications'],
    queryFn: DatabaseService.getNotifications,
    staleTime: 30 * 1000,
  });

  const { data: tasks = [] } = useQuery({
    queryKey: ['tasks'],
    queryFn: DatabaseService.getTasks,
    staleTime: 30 * 1000,
  });

  // Notification mutations
  const markAsReadMutation = useMutation({
    mutationFn: async (notificationId: string) => {
      const { error } = await supabase
        .from('notifications')
        .update({ is_read: true })
        .eq('id', notificationId);
      if (error) throw error;
      return notificationId;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
    }
  });

  const markAllAsReadMutation = useMutation({
    mutationFn: async () => {
      const { error } = await supabase
        .from('notifications')
        .update({ is_read: true })
        .eq('is_read', false);
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
    }
  });

  const deleteNotificationMutation = useMutation({
    mutationFn: async (notificationId: string) => {
      const { error } = await supabase
        .from('notifications')
        .delete()
        .eq('id', notificationId);
      if (error) throw error;
      return notificationId;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
    }
  });

  const clearAllNotificationsMutation = useMutation({
    mutationFn: async () => {
      const { error } = await supabase
        .from('notifications')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
    }
  });

  const unreadNotifications = realtimeNotifications.filter(n => !n.is_read).length;

  // Generate simple text report instead of PDF
  const generateReport = () => {
    try {
      if (tasks.length === 0) {
        alert('No tasks available to generate report');
        return;
      }

      let reportContent = `Majlis Dawatul Haq - Task Management Report\n`;
      reportContent += `Generated Date: ${new Date().toLocaleDateString()}\n`;
      reportContent += `Report Generated By: ${userName}\n\n`;

      reportContent += `Task Summary:\n`;
      reportContent += `Total Tasks: ${tasks.length}\n`;
      reportContent += `To Do: ${tasks.filter(t => t.status === 'todo').length}\n`;
      reportContent += `In Progress: ${tasks.filter(t => t.status === 'inprogress').length}\n`;
      reportContent += `Under Review: ${tasks.filter(t => t.status === 'review').length}\n`;
      reportContent += `Completed: ${tasks.filter(t => t.status === 'done').length}\n\n`;

      reportContent += `Task Details:\n`;
      tasks.forEach((task, index) => {
        reportContent += `${index + 1}. ${task.title}\n`;
        if (task.description) reportContent += `   Description: ${task.description}\n`;
        reportContent += `   Assigned To: ${task.assigned_to_name || 'Unassigned'}\n`;
        reportContent += `   Status: ${task.status}\n`;
        reportContent += `   Priority: ${task.priority}\n`;
        reportContent += `   Progress: ${task.progress || 0}%\n`;
        if (task.due_date) reportContent += `   Due Date: ${new Date(task.due_date).toLocaleDateString()}\n`;
        if (task.member_notes) reportContent += `   Notes: ${task.member_notes}\n`;
        reportContent += `\n`;
      });

      // Create and download text file
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `majlis-task-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      alert(`Report downloaded successfully! (${tasks.length} tasks included)`);
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Error generating report. Please try again.');
    }
  };

  const handleLogoutClick = () => {
    console.log('Logout button clicked');
    onLogout();
  };

  return (
    <>
      <header className="bg-gradient-to-r from-blue-600 to-green-600 text-white shadow-lg">
        <div className="container mx-auto px-3 sm:px-4 lg:px-6 py-3 sm:py-4">
          <div className="flex flex-col sm:flex-row justify-between items-center gap-3 sm:gap-0">
            {/* Logo and Title Section */}
            <div className="flex items-center space-x-3 sm:space-x-4 order-1 sm:order-1" dir="rtl">
              <img src="/lovable-uploads/e1652408-702e-47c9-834c-bafadef748e9.png" alt="Majlis e Dawatul Haq Logo" className="h-10 w-10 sm:h-12 sm:w-12 rounded-full bg-white p-1 flex-shrink-0" />
              <div className="text-center sm:text-right">
                <h1 className="text-lg sm:text-xl lg:text-2xl font-bold leading-tight">مجلس دعوۃ الحق</h1>
                <span className="text-xs sm:text-sm opacity-90 block mt-0.5">ٹاسک  مینجمنٹ سسٹم</span>
              </div>
            </div>

            {/* User Actions Section */}
            <div className="flex items-center gap-2 sm:gap-3 lg:gap-4 order-2 sm:order-2 flex-wrap justify-center sm:justify-end">
              {/* Report Generation Button - Only for admin */}
              {userRole === 'admin' && (
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={generateReport}
                  className="text-white hover:bg-white/10 p-2 sm:p-2.5"
                  title="Generate Report"
                >
                  <Download className="h-4 w-4 sm:h-5 sm:w-5" />
                </Button>
              )}
              
              {/* Notification Bell */}
              <div className="relative">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => setIsNotificationPanelOpen(true)}
                  className="text-white hover:bg-white/10 relative p-2 sm:p-2.5"
                >
                  <Bell className="h-4 w-4 sm:h-5 sm:w-5" />
                  {unreadNotifications > 0 && (
                    <Badge className="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 h-4 w-4 sm:h-5 sm:w-5 flex items-center justify-center p-0 bg-red-500 text-white text-xs min-w-0 rounded-full">
                      {unreadNotifications > 9 ? '9+' : unreadNotifications}
                    </Badge>
                  )}
                </Button>
              </div>
              
              {/* User Welcome Text */}
              <div className="hidden sm:flex flex-col items-end text-right" dir="rtl">
                <span className="text-sm lg:text-base font-medium">خوش آمدید، {userName}</span>
                <span className="px-2 py-0.5 bg-white/20 rounded-full text-xs opacity-90">
                  {userRole === 'admin' ? 'منتظم' : 'رکن'}
                </span>
              </div>

              {/* Mobile User Info */}
              <div className="flex sm:hidden items-center gap-2" dir="rtl">
                <span className="text-sm font-medium">{userName}</span>
                <span className="px-2 py-0.5 bg-white/20 rounded-full text-xs">
                  {userRole === 'admin' ? 'منتظم' : 'رکن'}
                </span>
              </div>
              
              {/* Role Switch Button - Only for admin */}
              {userRole === 'admin' && onRoleSwitch && (
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={onRoleSwitch}
                  className="text-white border-white/30 hover:bg-white/10 hover:border-white/50 transition-all duration-200 text-xs sm:text-sm px-2 sm:px-3"
                >
                  <Users className="h-3 w-3 sm:h-4 sm:w-4 ml-1 sm:mr-2" />
                  <span dir="rtl" className="hidden sm:inline">رکن کی نظر</span>
                  <span dir="rtl" className="sm:hidden">رکن</span>
                </Button>
              )}
              
              {/* Logout Button */}
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleLogoutClick}
                className="text-white border-white/30 hover:bg-white/10 hover:border-white/50 transition-all duration-200 text-xs sm:text-sm px-2 sm:px-3"
                disabled={false}
              >
                <LogOut className="h-3 w-3 sm:h-4 sm:w-4 ml-1 sm:mr-2" />
                <span dir="rtl" className="hidden sm:inline">لاگ آؤٹ</span>
                <span dir="rtl" className="sm:hidden">خروج</span>
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Notification Panel */}
      <NotificationPanel
        notifications={realtimeNotifications}
        isOpen={isNotificationPanelOpen}
        onClose={() => setIsNotificationPanelOpen(false)}
        onMarkAsRead={markAsReadMutation.mutate}
        onMarkAllAsRead={markAllAsReadMutation.mutate}
        onDeleteNotification={deleteNotificationMutation.mutate}
        onClearAll={clearAllNotificationsMutation.mutate}
      />
    </>
  );
};

export default Header;
