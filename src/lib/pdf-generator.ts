import 'jspdf-autotable';
import jsPDF from 'jspdf';
import { Task } from '@/components/TaskCard';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

export const generatePDFReport = async (tasks: Task[], userName: string) => {
  try {
    console.log('Generating PDF report with tasks:', tasks.length);
    
    if (tasks.length === 0) {
      throw new Error('رپورٹ بنانے کے لیے کم از کم ایک ٹاسک ہونا ضروری ہے');
    }

    // Create new PDF document
    const doc = new jsPDF('p', 'mm', 'a4');
    
    // Set font for Urdu text support (using Arial Unicode MS or similar)
    doc.setFont('helvetica');
    
    const currentDate = new Date().toLocaleDateString('ur-PK');
    const currentTime = new Date().toLocaleTimeString('ur-PK');
    
    // Add logo to header
    try {
      // Load the logo image
      const logoImg = new Image();
      logoImg.crossOrigin = 'anonymous';
      
      await new Promise((resolve, reject) => {
        logoImg.onload = resolve;
        logoImg.onerror = reject;
        logoImg.src = '/lovable-uploads/e1652408-702e-47c9-834c-bafadef748e9.png';
      });
      
      // Add logo to PDF (top center)
      const logoWidth = 25;
      const logoHeight = 25;
      const logoX = (doc.internal.pageSize.getWidth() - logoWidth) / 2;
      const logoY = 10;
      
      // Convert image to base64 and add to PDF
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = logoImg.width;
      canvas.height = logoImg.height;
      ctx?.drawImage(logoImg, 0, 0);
      const logoDataUrl = canvas.toDataURL('image/png');
      
      doc.addImage(logoDataUrl, 'PNG', logoX, logoY, logoWidth, logoHeight);
    } catch (error) {
      console.warn('Could not load logo image:', error);
      // Continue without logo
    }
    
    // Header text
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Majlis Dawatul Haq - Task Management Report', doc.internal.pageSize.getWidth() / 2, 45, { align: 'center' });
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Report Date: ${currentDate}`, doc.internal.pageSize.getWidth() / 2, 55, { align: 'center' });
    doc.text(`Report Time: ${currentTime}`, doc.internal.pageSize.getWidth() / 2, 62, { align: 'center' });
    doc.text(`Generated by: ${userName}`, doc.internal.pageSize.getWidth() / 2, 69, { align: 'center' });
    
    // Summary section
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Summary:', 20, 85);
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    const summaryY = 95;
    doc.text(`Total Tasks: ${tasks.length}`, 20, summaryY);
    doc.text(`Completed: ${tasks.filter(t => t.status === 'completed').length}`, 20, summaryY + 7);
    doc.text(`In Progress: ${tasks.filter(t => t.status === 'in-progress').length}`, 20, summaryY + 14);
    doc.text(`Under Review: ${tasks.filter(t => t.status === 'in-review').length}`, 20, summaryY + 21);
    doc.text(`To Do: ${tasks.filter(t => t.status === 'todo').length}`, 20, summaryY + 28);
    
    // Status and priority labels
    const statusLabels = {
      todo: 'To Do',
      'in-progress': 'In Progress',
      'in-review': 'Under Review',
      completed: 'Completed'
    };

    const priorityLabels = {
      high: 'High',
      medium: 'Medium',
      low: 'Low'
    };
    
    // Prepare table data
    const tableData = tasks.map((task, index) => [
      (index + 1).toString(),
      task.title || 'N/A',
      task.assigned_to_name || 'Unassigned',
      statusLabels[task.status] || task.status,
      priorityLabels[task.priority] || task.priority,
      `${task.progress || 0}%`,
      task.due_date ? new Date(task.due_date).toLocaleDateString() : 'N/A',
      task.member_notes || 'No notes'
    ]);
    
    // Add table
    doc.autoTable({
      startY: 135,
      head: [['#', 'Task Title', 'Assigned To', 'Status', 'Priority', 'Progress', 'Due Date', 'Notes']],
      body: tableData,
      styles: {
        fontSize: 8,
        cellPadding: 3,
        overflow: 'linebreak',
        halign: 'left'
      },
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold',
        fontSize: 9
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245]
      },
      columnStyles: {
        0: { cellWidth: 10, halign: 'center' }, // #
        1: { cellWidth: 35 }, // Task Title
        2: { cellWidth: 25 }, // Assigned To
        3: { cellWidth: 20 }, // Status
        4: { cellWidth: 18 }, // Priority
        5: { cellWidth: 15, halign: 'center' }, // Progress
        6: { cellWidth: 20 }, // Due Date
        7: { cellWidth: 35 } // Notes
      },
      margin: { left: 15, right: 15 },
      didDrawPage: function(data) {
        // Add page numbers
        const pageCount = doc.getNumberOfPages();
        const pageSize = doc.internal.pageSize;
        const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();
        
        doc.setFontSize(8);
        doc.text(
          `Page ${data.pageNumber} of ${pageCount}`,
          pageSize.width - 30,
          pageHeight - 10
        );
      }
    });
    
    // Add footer
    const finalY = (doc as any).lastAutoTable.finalY || 200;
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.text(
      `Report generated on ${new Date().toLocaleString()}`,
      doc.internal.pageSize.getWidth() / 2,
      finalY + 20,
      { align: 'center' }
    );
    
    // Save the PDF
    const fileName = `majlis-task-report-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    console.log('PDF report generated successfully with', tasks.length, 'tasks');
    return true;

  } catch (error) {
    console.error('Error generating PDF report:', error);
    throw error;
  }
};